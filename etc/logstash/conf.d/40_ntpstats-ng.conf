# /etc/logstash/conf.d/40_ntpstats-ng.conf
#
# 2017-04-09
# WOLfgang Schricker <time@wols.org>
# GPL-3

filter {
    if [type] == "loopstats" {
        csv {
            separator => " "
            columns   => [ "mjd", "time_past_midnight", "clock_offset", "frequency_offset", "rms_jitter", "frequency_jitter", "loop_time_constant" ]
            convert   => {
                "mjd"                => "integer"
                "time_past_midnight" => "float"
                "clock_offset"       => "float"
                "frequency_offset"   => "float"
                "rms_jitter"         => "float"
                "frequency_jitter"   => "float"
            }
        }

        if [path] {

            # /var/opt/ntpstats-ng/spool/localhost.localdomain.loopstats
            #     split(/).array[-1]
            # localhost.localdomain.loopstats
            #     split(.)
            # [ localhost, localdomain, loopstats ]
            #     pop(1)
            # [ localhost, localdomain ]
            #     join(.)
            # localhost.localdomain

            ruby {
                # logstas >= 5.0
                code => "
                    # add_field 'stats_host'
                    inputpath = event.get('path').split('/');
                    inputfile = inputpath[-1].split('.');

                    inputfile.pop;

                    event.set('stats_host', inputfile.join(sep='.'));
                "
            }
        } else {
            mutate {
                add_field => { "stats_host" => "%{host}" }
            }
        }

        if [stats_host] {
            mutate {
                add_field => { "stats_zone" => "%{stats_host}" }
            }

            translate {
                field           => "stats_zone"
                destination     => "stats_zone"
                exact           => "true"
                override        => "true"
                dictionary_path => "/etc/logstash/dictionary-ntpstats-stats_host.yml"
                fallback        => "dictionary_no_match"
            }

            if [stats_zone] == "dictionary_no_match" {
                mutate {
                    remove_field => [ "stats_zone" ]
                }
            }
        }

        ruby {
            # logstas >= 5.0
            init => "require 'date'; require 'time';"
            code => "
                # convert 'mjd' + 'time_past_midnight'
                statsdate           = Date.jd(2400001 + event.get('mjd'));
                statssec, statsmsec = event.get('time_past_midnight').to_s.split('.',2);
                statstime           = Time.parse(statsdate.to_s).utc + statssec.to_i;

                # update field 'es_index'
                esindex = event.get('es_index') + '-' + DateTime.parse(statstime.to_s).strftime('%Y-%m-%d');
                event.set('es_index', esindex);

                # add_field 'stats_stamp'
                statstime = DateTime.parse(statstime.to_s).strftime('%Y-%m-%dT%H:%M:%S');
                statstime = statstime.to_s + '.' + statsmsec + 'Z';
                event.set('stats_stamp', statstime.to_s);
            "
        }

        # clean up
        mutate {
            remove_field => [ "@version", "host", "message", "path" ]
        }
    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    } else if [type] == "peerstats" {
        csv {
            separator => " "
            columns   => [ "mjd", "time_past_midnight", "source_address", "status_word", "clock_offset", "delay", "dispersion", "jitter" ]
            convert   => {
                "mjd"                => "integer"
                "time_past_midnight" => "float"
                "clock_offset"       => "float"
                "delay"              => "float"
                "dispersion"         => "float"
                "jitter"             => "float"
            }
        }

        if [path] {

            # /var/opt/ntpstats-ng/spool/localhost.localdomain.peerstats
            #     split(/)
            # localhost.localdomain.peerstats
            #     array[-1].split(.)
            # [ localhost, localdomain, peerstats ]
            #     pop(1)
            # [ localhost, localdomain ]
            #     join(.)
            # localhost.localdomain

            ruby {
                # logstas >= 5.0
                code => "
                    # add_field 'stats_host'
                    inputpath = event.get('path').split('/');
                    inputfile = inputpath[-1].split('.');

                    inputfile.pop;

                    event.set('stats_host', inputfile.join(sep='.'));
                "
            }
        } else {
            mutate {
                add_field => { "stats_host" => "%{host}" }
            }
        }

        if [source_address] {
            mutate {
                add_field => {
                    "source_anonymous" => "%{source_address}"
                    "source_zone"      => "%{source_address}"
                }
            }

            anonymize {
                fields    => [ "source_anonymous" ]
                algorithm => "IPV4_NETWORK"
                key       => 16
            }

            translate {
                field           => "source_zone"
                destination     => "source_zone"
                exact           => "true"
                override        => "true"
                dictionary_path => "/etc/logstash/dictionary-ntpstats-source_address.yml"
                fallback        => "dictionary_no_match"
            }

            if [source_zone] == "dictionary_no_match" {
                mutate {
                    remove_field => [ "source_zone" ]
                }
            }
        }

        if [stats_host] {
            mutate {
                add_field => { "stats_zone" => "%{stats_host}" }
            }

            translate {
                field           => "stats_zone"
                destination     => "stats_zone"
                exact           => "true"
                override        => "true"
                dictionary_path => "/etc/logstash/dictionary-ntpstats-stats_host.yml"
                fallback        => "dictionary_no_match"
            }

            if [stats_zone] == "dictionary_no_match" {
                mutate {
                    remove_field => [ "stats_zone" ]
                }
            }
        }

        ruby {
            # logstas >= 5.0
            init => "require 'date'; require 'time';"
            code => "
                # convert 'mjd' + 'time_past_midnight'
                statsdate           = Date.jd(2400001 + event.get('mjd'));
                statssec, statsmsec = event.get('time_past_midnight').to_s.split('.',2);
                statstime           = Time.parse(statsdate.to_s).utc + statssec.to_i;

                # update field 'es_index'
                esindex = event.get('es_index') + '-' + DateTime.parse(statstime.to_s).strftime('%Y-%m-%d');
                event.set('es_index', esindex);

                # add_field 'stats_stamp'
                statstime = DateTime.parse(statstime.to_s).strftime('%Y-%m-%dT%H:%M:%S');
                statstime = statstime.to_s + '.' + statsmsec + 'Z';
                event.set('stats_stamp', statstime.to_s);
            "
        }

        # clean up
        mutate {
            remove_field => [ "@version", "host", "message", "path" ]
        }
    }
}

# EOF
