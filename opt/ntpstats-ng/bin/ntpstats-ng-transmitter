#!/bin/bash
#
# NAME
# ntpstats-ng-transmitter
#
# VERSION
# 0.0.3
#
# WARNING
# This software is under the heavy development and considered ALPHA quality
# till the version hits >=1.0.0. Things might be broken, not all features have
# been implemented, and APIs will be likely to change. YOU HAVE BEEN WARNED.
#
# REPOSITORY
# https://github.com/wols/ntpstats-ng/
#
# COPYRIGHT AND LICENSE
# Copyright (C) 2017 WOLfgang Schricker <time@wols.org>
# GPL-3

# CONFIG

INTERVAL=30
#
DIR_SPOOL="/var/opt/ntpstats-ng/spool"
ACTION="cat"
CMD_ACT=$ACTION
TYPE=""
STATS_RENAME=0
RUN_DRY=0
VERBOSE=0
#
PATTERN_NTP="\/([[:alnum:]_-]+)\.(loop|peer)stats\.[[:digit:]]{8}$"
PATTERN_MBG="\/([[:alnum:]._-]+)\/(ntp_mon_)stats\.[[:digit:]]{8}$"
# used by
# "${CMD_ACT} ${FILE} >> ${DIR_SPOOL}/${BASH_REMATCH[1]}.${BASH_REMATCH[2]}stats"
#
_USAGE="$(basename $0) -s <DIR_SOURCE> [-d <DIR_DESTINATION>] [-t <(loop|peer|mbgmon)stats>] [-a <cat|copy|move>] [-i <INTERVAL>] [-r] [-n] [-v|-h]"

# FUNCTIONS

function _bash_version {
    if (( ${BASH_VERSION%%.*} < 4 )); then
        echo "Sorry, you need at least bash-4.0 to run this script."
        exit 1
    fi
}

function _help {
    cat << EOT

Name

    $(basename $0) - Transfer NTP statistic files (eg. for Logstash input)

Syntax

    ${_USAGE}

Options

    -h  Print this help text

    -s  Statistc (source) directory; required

    -d  Spool (destination) directory; default /var/opt/ntpstats-ng/spool

    -t  Statistic type loopstats, peerstats and mbgmonstats; default (loop|peer)stats

    -a  File action cat or copy or move; default cat

    -i  Action interval; default 30 seconds

    -r  Rename source (action cat only); default no

    -v  Verbose output

    -n  Dry run (no action) for use with -v; default no

Examples

    ls /var/log/ntpstats
    localhost.loopstats.20160501
    localhost.loopstats.20160502
    localhost.peerstats.20160501
    localhost.peerstats.20160502


    $(basename $0) -s /var/log/ntpstats -i 3 -v -n

    DIR_STATS /var/log/ntpstats | DIR_SPOOL /var/opt/ntpstats-ng/spool | TYPE  | ACTION cat | INTERVAL 3 | DRY 1
    cat /var/log/ntpstats/localhost.loopstats.20160501 >> /var/opt/ntpstats-ng/spool/localhost.loopstats
    elapsed: 3 seconds
    cat /var/log/ntpstats/localhost.loopstats.20160502 >> /var/opt/ntpstats-ng/spool/localhost.loopstats
    elapsed: 3 seconds
    cat /var/log/ntpstats/localhost.peerstats.20160501 >> /var/opt/ntpstats-ng/spool/localhost.peerstats
    elapsed: 3 seconds
    cat /var/log/ntpstats/localhost.peerstats.20160502 >> /var/opt/ntpstats-ng/spool/localhost.peerstats
    elapsed: 3 seconds


    $(basename $0) -s /var/log/ntpstats -t loopstats -i 3 -r -v -n

    DIR_STATS /var/log/ntpstats | DIR_SPOOL /var/opt/ntpstats-ng/spool | TYPE loopstats | ACTION cat;rename | INTERVAL 3 | DRY 1
    cat /var/log/ntpstats/localhost.loopstats.20160501 >> /var/opt/ntpstats-ng/spool/localhost.loopstats
    mv /var/log/ntpstats/localhost.loopstats.20160501 /var/log/ntp/stats/localhost.loopstats.20160501_1493042798
    elapsed: 3 seconds
    cat /var/log/ntpstats/localhost.loopstats.20160502 >> /var/opt/ntpstats-ng/spool/localhost.loopstats
    mv /var/log/ntpstats/localhost.loopstats.20160502 /var/log/ntp/stats/localhost.loopstats.20160502_1493042801
    elapsed: 3 seconds

EOT
    exit 0
}

function _log {
    if [[ ${VERBOSE} -eq 1 ]]; then
        echo "$@"
    fi
}

function _usage {
    echo "Usage: ${_USAGE}" 1>&2
    exit 1
}

# main

_bash_version

#

while getopts ":a:d:hi:nrs:t:v" o; do
    case "${o}" in
        a)
            ACTION="${OPTARG}"

            if [[ "${ACTION}" == "cat" ]]; then
                CMD_ACT="cat"
            elif [[ "${ACTION}" == "copy" ]]; then
                CMD_ACT="cp"
            elif [[ "${ACTION}" == "move" ]]; then
                CMD_ACT="mv"
            else
                echo "Option -${OPTARG} accepts 'cat', 'copy' or 'move' only." >&2
                _usage
            fi
            ;;
        d)
            DIR_SPOOL="${OPTARG}"
            ;;
        h)
            _help
            ;;
        i)
            INTERVAL="${OPTARG}"

            if [[ ! "${INTERVAL}" =~ ^[[:digit:]]+$ ]]; then
                echo "${INTERVAL} must be a integer." >&2
                _usage
            fi
            ;;
        n)
            RUN_DRY=1
            ;;
        r)
            STATS_RENAME=1
            ;;
        s)
            DIR_STATS="${OPTARG}"
            ;;
        t)
            TYPE="${OPTARG}"

            if [[ ! "${TYPE}" =~ ^(loop|peer|mbgmon)stats$ ]]; then
                echo "Option -${OPTARG} accepts 'loopstats', 'peerstats' or 'mbgmonstats' only." >&2
                _usage
            fi
            ;;
        v)
            VERBOSE=1
            ;;
        :)
            # option with required argument missing.
            if [[ "${OPTARG}" == "a" ]] || [[ "${OPTARG}" == "d" ]] || [[ "${OPTARG}" == "i" ]]; then
                # we already have a default values, so ignore this error
                :
            else
                echo "Option -${OPTARG} requires an argument." >&2
                _usage
            fi
            ;;
        \?)
            echo "Invalid option: -${OPTARG}" >&2
            _usage
            ;;
        *)
            _usage
            ;;
    esac
done
shift $((OPTIND-1))

#

if [[ -z "${DIR_STATS}" ]] || [[ -z "${DIR_SPOOL}" ]]; then
    _usage
elif [[ "${DIR_STATS}" == "${DIR_SPOOL}" ]]; then
    echo "Source directory and destination directory are the same."
    _usage
fi

if [[ ! -d "${DIR_STATS}" ]]; then
    echo "${DIR_STATS} is not a directory." >&2
    _usage
fi

if [[ ! -d "${DIR_SPOOL}" ]]; then
    echo "${DIR_SPOOL} is not a directory." >&2
    _usage
fi

if [[ "${TYPE}" == "mbgmonstats" ]]; then
    PATTERN=$PATTERN_MBG
else
    PATTERN=$PATTERN_NTP
fi

if [[ ${STATS_RENAME} -eq 1 ]] && [[ "${ACTION}" != "cat" ]]; then
    echo "Option -r only if -a 'cat'"
    _usage
fi

#

if [[ ${VERBOSE} -eq 1 ]]; then
    LOG_ACTION=${ACTION}

    [[ ${STATS_RENAME} -eq 1 ]] && LOG_ACTION="${LOG_ACTION};rename"

    echo "DIR_STATS ${DIR_STATS} | DIR_SPOOL ${DIR_SPOOL} | TYPE ${TYPE} | ACTION ${LOG_ACTION} | INTERVAL ${INTERVAL} | DRY ${RUN_DRY} "
fi

#

for FILE in $(find $DIR_STATS -maxdepth 1 -type f | sort); do
    if [[ -r "${FILE}" ]] && [[ "${FILE}" =~ ${PATTERN} ]]; then
        if [[ -z "${BASH_REMATCH[1]}" ]] || [[ -z "${BASH_REMATCH[2]}" ]]; then
            _log "${FILE} - \$PATTERN not matched."
            continue
        else
            STATS_HOST="${BASH_REMATCH[1]}"
            STATS_TYPE="${BASH_REMATCH[2]}stats"

            # TODO verbose level
            # _log "DEBUG: ${STATS_HOST} | ${STATS_TYPE}"
        fi

        if [[ -n "${TYPE}" ]]; then
            STATS_TYPE=${STATS_TYPE/ntp_mon_/mbgmon}

            [[ "${STATS_TYPE}" != "${TYPE}" ]] && continue
        fi

        _NOW=$(TZ=UTC0 printf '%(%s)T\n' '-1')

        if [[ "${CMD_ACT}" == "cat" ]]; then
            CMD="${CMD_ACT} ${FILE} >> ${DIR_SPOOL}/${STATS_HOST}.${STATS_TYPE}"

            [[ ${STATS_RENAME} -eq 1 ]] && CMD_2="mv ${FILE} ${FILE}_${_NOW}"
        else
            CMD="${CMD_ACT} ${FILE} ${DIR_SPOOL}/"
        fi

        _log ${CMD}

        [[ ! -z ${CMD_2} ]] && _log ${CMD_2}

        if [[ ${RUN_DRY} -eq 0 ]]; then
            eval $CMD

            [[ ! -z ${CMD_2} ]] && eval $CMD_2
        fi

        sleep $INTERVAL

        ELAPSED=$(( $(TZ=UTC0 printf '%(%s)T\n' '-1') - $_NOW ))

        _log "elapsed: ${ELAPSED} seconds"
    fi
done

# End of ntpstats-ng-transmitter
